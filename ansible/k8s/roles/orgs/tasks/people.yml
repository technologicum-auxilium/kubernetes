---
- name: Compute departments base DN
  ansible.builtin.set_fact:
    depts_base_dn: "OU=40-Departments,{{ root_dn }}"

# Ensure department & Users OU exist
- name: Ensure department containers
  vars:
    dept_name: "{{ item.department }}"
    dept_dn: "OU={{ dept_name }},{{ depts_base_dn }}"
  block:
    - community.windows.win_domain_ou:
        name: "{{ dept_name }}"
        path: "{{ depts_base_dn }}"
        state: present
        protect: true
    - community.windows.win_domain_ou:
        name: "Users"
        path: "{{ dept_dn }}"
        state: present
        protect: true
  loop: "{{ org }}"

# Create dept & role groups
- name: Create department groups
  community.windows.win_domain_group:
    name: "{{ group_prefix_dept }}{{ item.department | regex_replace('[^A-Za-z0-9]+','_') }}"
    scope: global
    path: "OU=20-Groups,{{ root_dn }}"
    state: present
    description: "Department group for {{ item.department }}"
  loop: "{{ org }}"

- name: Create extra dept groups
  community.windows.win_domain_group:
    name: "{{ group_prefix_dept }}{{ grp | regex_replace('[^A-Za-z0-9]+','_') }}"
    scope: global
    path: "OU=20-Groups,{{ root_dn }}"
    state: present
    description: "Extra dept group {{ grp }}"
  loop: "{{ org | map(attribute='dept_groups') | sum(start=[]) }}"
  loop_control: { loop_var: grp }

- name: Create role groups
  community.windows.win_domain_group:
    name: "{{ group_prefix_role }}{{ grp | regex_replace('[^A-Za-z0-9]+','_') }}"
    scope: global
    path: "OU=20-Groups,{{ root_dn }}"
    state: present
    description: "Role group {{ grp }}"
  loop: "{{ org | map(attribute='role_groups') | sum(start=[]) }}"
  loop_control: { loop_var: grp }

# First pass users (no manager yet)
- name: Create users (first pass)
  vars:
    dept_name: "{{ item.0.department }}"
    user: "{{ item.1 }}"
    users_dn: "OU=Users,OU={{ dept_name }},{{ depts_base_dn }}"
  community.windows.win_domain_user:
    name: "{{ user.username }}"
    upn: "{{ user.upn | default(user.username ~ '@' ~ ad_domain_name) }}"
    firstname: "{{ user.given_name }}"
    surname: "{{ user.surname }}"
    display_name: "{{ user.display_name | default(user.given_name ~ ' ' ~ user.surname) }}"
    description: "{{ user.title | default('') }}"
    email: "{{ user.mail | default('') }}"
    path: "{{ users_dn }}"
    password: "{{ user.password | default(default_password) }}"
    update_password: on_create
    enabled: "{{ (user.enabled is defined) | ternary(user.enabled, enabled_by_default) }}"
    password_never_expires: "{{ password_never_expires }}"
    state: present
  loop: "{{ org | subelements('users') }}"

# Map username -> DN for managers
- name: Build username->DN map
  ansible.builtin.set_fact:
    username_dn_map: >-
      {{
        (username_dn_map | default({})) |
        combine({ item.1.username:
          "CN=" ~ (item.1.display_name | default(item.1.given_name ~ ' ' ~ item.1.surname)) ~
          ",OU=Users,OU=" ~ item.0.department ~ "," ~ depts_base_dn
        })
      }}
  loop: "{{ org | subelements('users') }}"

# Second pass: set manager attribute
- name: Set manager for users
  vars:
    user: "{{ item.1 }}"
    dept_name: "{{ item.0.department }}"
    users_dn: "OU=Users,OU={{ dept_name }},{{ depts_base_dn }}"
    manager_dn: "{{ username_dn_map[user.manager] | default(omit) }}"
  when: user.manager is defined and user.manager
  community.windows.win_domain_user:
    name: "{{ user.username }}"
    path: "{{ users_dn }}"
    state: present
    attributes:
      manager: "{{ manager_dn }}"
  loop: "{{ org | subelements('users') }}"

# Memberships
- name: Ensure department group membership
  vars:
    dept_name: "{{ item.0.department }}"
    user: "{{ item.1 }}"
    gg_dept: "{{ group_prefix_dept }}{{ dept_name | regex_replace('[^A-Za-z0-9]+','_') }}"
  community.windows.win_domain_group_membership:
    name: "{{ gg_dept }}"
    members: ["{{ user.username }}"]
    state: present
  loop: "{{ org | subelements('users') }}"

- name: Ensure role memberships
  vars:
    user: "{{ item.1 }}"
    roles: "{{ user.member_of_roles | default([]) }}"
  when: roles | length > 0
  community.windows.win_domain_group_membership:
    name: "{{ group_prefix_role }}{{ role | regex_replace('[^A-Za-z0-9]+','_') }}"
    members: ["{{ user.username }}"]
    state: present
  loop: "{{ org | subelements('users') }}"
  loop_control: { loop_var: item }
  with_items: "{{ roles }}"
  loop_control:
    loop_var: role
